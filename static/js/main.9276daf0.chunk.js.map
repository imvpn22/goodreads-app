{"version":3,"sources":["Pagination.js","GoodReads.js","App.js","serviceWorker.js","index.js"],"names":["LEFT_PAGE","RIGHT_PAGE","range","from","to","step","arguments","length","undefined","i","push","Pagination","fetchPageNumbers","totalPages","_this","props","currentPage","pageNeighbours","totalNumbers","startPage","Math","max","endPage","min","pages","hasLeftSpill","hasRightSpill","spillOffset","extraPages","concat","Object","toConsumableArray","gotoPage","page","onPageChanged","handleClick","evt","preventDefault","handleMoveLeft","handleMoveRight","_this2","this","totalRecords","react_default","a","createElement","react","aria-label","className","map","index","key","onClick","aria-hidden","Component","GoodReads","createBookView","book","id","_text","src","best_book","image_url","alt","title","author","name","average_rating","ratings_count","text_reviews_count","booksView","books","onSubmit","e","handleSubmit","type","placeholder","value","queryText","onChange","handleQuery","required","autoFocus","isSearching","msg","src_Pagination","convert","require","USER_KEY","App","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","target","setState","searchBook","state","url","fetch","method","headers","X-Requested-With","then","res","text","xml","xml2json","compact","spaces","trim","nativeType","JSON","parse","GoodreadsResponse","search","results","work","parseInt","queryTime","ceil","catch","err","console","log","src_GoodReads","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.9276daf0.chunk.js","sourcesContent":["import React, { Component, Fragment } from 'react';\n\nconst LEFT_PAGE = 'LEFT';\nconst RIGHT_PAGE = 'RIGHT';\n\nconst range = (from, to, step = 1) => {\n    let i = from;\n    let range = [];\n    while (i <= to) {\n        range.push(i);\n        i += step;\n    }\n    return range;\n};\n\nclass Pagination extends Component {\n\n    /**\n   * Let's say we have 10 pages and we set pageNeighbours to 2\n   * Given that the current page is 6\n   * The pagination control will look like the following:\n   *\n   * (1) < {4 5} [6] {7 8} > (10)\n   *\n   * (x) => terminal pages: first and last page(always visible)\n   * [x] => represents current page\n   * {...x} => represents page neighbours\n   */\n   fetchPageNumbers = () => {\n\n        let totalPages = this.props.totalPages;\n        let currentPage = this.props.currentPage;\n        let pageNeighbours = this.props.pageNeighbours;\n\n        /**\n        * totalNumbers: the total page numbers to show on the control\n        * totalBlocks: totalNumbers + 2 to cover for the left(<) and right(>) controls\n        */\n        let totalNumbers = (this.props.pageNeighbours * 2) + 3;\n        let totalBlocks = totalNumbers + 2;\n\n        if (totalPages > totalBlocks) {\n\n            let startPage = Math.max(2, currentPage - pageNeighbours);\n            let endPage = Math.min(totalPages - 1, currentPage + pageNeighbours);\n\n            let pages = range(startPage, endPage);\n\n            /**\n            * hasLeftSpill: has hidden pages to the left\n            * hasRightSpill: has hidden pages to the right\n            * spillOffset: number of hidden pages either to the left or to the right\n            */\n            let hasLeftSpill = startPage > 2;\n            let hasRightSpill = (totalPages - endPage) > 1;\n            let spillOffset = totalNumbers - (pages.length + 1);\n\n            switch (true) {\n                // handle: (1) < {5 6} [7] {8 9} (10)\n                case (hasLeftSpill && !hasRightSpill): {\n                    let extraPages = range(startPage - spillOffset, startPage - 1);\n                    pages = [LEFT_PAGE, ...extraPages, ...pages];\n                    break;\n                }\n\n                // handle: (1) {2 3} [4] {5 6} > (10)\n                case (!hasLeftSpill && hasRightSpill): {\n                    let extraPages = range(endPage + 1, endPage + spillOffset);\n                    pages = [...pages, ...extraPages, RIGHT_PAGE];\n                    break;\n                }\n\n                // handle: (1) < {4 5} [6] {7 8} > (10)\n                case (hasLeftSpill && hasRightSpill):\n                default: {\n                    pages = [LEFT_PAGE, ...pages, RIGHT_PAGE];\n                    break;\n                }\n            }\n\n            return [1, ...pages, totalPages];\n        }\n\n        return range(1, totalPages);\n    };\n\n    gotoPage = page => {\n        let currentPage = Math.max(0, Math.min(page, this.props.totalPages));\n        this.props.onPageChanged(currentPage);\n    };\n\n    handleClick = page => evt => {\n        evt.preventDefault();\n        this.gotoPage(page);\n    };\n\n    handleMoveLeft = evt => {\n        evt.preventDefault();\n        this.gotoPage(this.props.currentPage - (this.props.pageNeighbours * 2) - 1);\n    };\n\n    handleMoveRight = evt => {\n        evt.preventDefault();\n        this.gotoPage(this.props.currentPage + (this.props.pageNeighbours * 2) + 1);\n    };\n\n\n    render() {\n        // console.log(this.props);\n        if (!this.props.totalRecords || this.props.totalPages === 1) return null;\n\n        let currentPage = this.props.currentPage;\n        let pages = this.fetchPageNumbers();\n\n        return (\n            <Fragment>\n                <nav aria-label=\"Pagination\">\n                  <ul className=\"pagination\">\n                    { pages.map((page, index) => {\n\n                      if (page === LEFT_PAGE) return (\n                        <li key={index} className=\"page-item\">\n                          <button className=\"page-link\" aria-label=\"Previous\" onClick={this.handleMoveLeft}>\n                            <span aria-hidden=\"true\">&laquo;</span>\n                            <span className=\"sr-only\">Previous</span>\n                          </button>\n                        </li>\n                      );\n\n                      if (page === RIGHT_PAGE) return (\n                        <li key={index} className=\"page-item\">\n                          <button className=\"page-link\" aria-label=\"Next\" onClick={this.handleMoveRight}>\n                            <span aria-hidden=\"true\">&raquo;</span>\n                            <span className=\"sr-only\">Next</span>\n                          </button>\n                        </li>\n                      );\n\n                      return (\n                        <li key={index} className={`page-item${ currentPage === page ? ' active' : ''}`}>\n                          <button className=\"page-link\" onClick={ this.handleClick(page) }>{ page }</button>\n                        </li>\n                      );\n\n                    }) }\n\n                  </ul>\n                </nav>\n          </Fragment>\n        );\n    }\n}\n\nexport default Pagination;\n","import React, { Component } from 'react';\nimport Pagination from './Pagination';\n\nclass GoodReads extends Component {\n\n    createBookView = (book) => {\n        return <div className=\"bookCard\"  key={book.id._text}>\n            <img className=\"bookImg\"\n                src={book.best_book.image_url._text}\n                alt={book.best_book.title._text + \" image\"}/>\n            <div className=\"bookTitle\"> {book.best_book.title._text} </div>\n            <div className=\"bookAuthor\"> {book.best_book.author.name._text} </div>\n            <div className=\"bookRating\">\n                <i className=\"fa fa-star\"></i>\n                {book.average_rating._text}\n            </div>\n            <div className=\"bookOther\">\n                Based on {book.ratings_count._text} Ratings\n                and {book.text_reviews_count._text} Reviews\n            </div>\n         </div>;\n    };\n\n    render() {\n        let booksView = 'No Books';\n        if (this.props.books && this.props.books.length > 0) {\n            booksView = this.props.books.map(book => this.createBookView(book));\n        }\n\n        return (\n            <div className=\"main\">\n                <div className=\"header\">Goodreads Book Search</div>\n                <form className=\"searchForm\" onSubmit={e => this.props.handleSubmit(e)}>\n                    <div className=\"searchBox\">\n                        <input type=\"text\"\n                            placeholder=\"Book name, author\"\n                            value={this.props.queryText}\n                            onChange={e => this.props.handleQuery(e)}\n                            required={true}\n                            autoFocus={true}/>\n                        <button type=\"submit\" value=\"Search\">\n                            <i className={(this.props.isSearching ? \"fas fa-circle-notch fa-spin\" : \"fas fa-search\")}></i>\n                        </button>\n                    </div>\n                    <div className=\"responseBox\">\n                        {this.props.msg}\n                    </div>\n                    <Pagination\n                        currentPage={this.props.currentPage}\n                        totalRecords={this.props.totalRecords}\n                        totalPages={this.props.totalPages}\n                        onPageChanged={this.props.onPageChanged}\n                        pageNeighbours={this.props.pageNeighbours}\n                    />\n                </form>\n\n                <div className=\"bookList\">\n                    {booksView}\n                </div>\n\n            </div>\n        );\n    }\n}\n\nexport default GoodReads;\n","import React, { Component } from 'react';\nimport GoodReads from './GoodReads';\n\nconst convert = require('xml-js');\n\nconst USER_KEY = `tmNs0wHYZNwx5cr20pTg`;\n\nclass App extends Component {\n    constructor(props){\n        super(props);\n        this.state = {\n            books: [],\n            queryText: '',\n            isSearching: false,\n            currentPage: 1,\n            totalRecords: 0,\n            totalPages: 0,\n            pageNeighbours: 2,\n            msg: ''\n        }\n    }\n\n    componentDidMount() {\n\n    }\n\n    handleQuery = e => {\n        let queryText = e.target.value;\n        this.setState({queryText});\n        // this.searchBook(queryText);\n    };\n\n    searchBook = () => {\n        let queryText = this.state.queryText;\n        let currentPage = this.state.currentPage;\n        let APIProxy = `https://cors-anywhere.herokuapp.com/`;\n        let url = `${APIProxy}https://www.goodreads.com/search.xml?key=${USER_KEY}&q=${queryText}&page=${currentPage}`;\n\n        fetch(url, {\n                method: 'GET',\n                headers: {\n                    \"X-Requested-With\" : \"XMLHttpRequest\"\n                }\n        }).then(res => res.text())\n        .then(xml => {\n            let res = convert.xml2json(xml, {\n                  compact: true,\n                  spaces: 0,\n                  trim: true,\n                  nativeType: true\n                });\n\n            res = JSON.parse(res);\n\n            let books = res.GoodreadsResponse.search.results.work;\n            let totalRecords = parseInt(res.GoodreadsResponse.search['total-results']._text);\n            let queryTime = res.GoodreadsResponse.search['query-time-seconds']._text;\n            let msg = `Fetched ${totalRecords} results in ${queryTime} sec.`;\n            let totalPages = Math.ceil(totalRecords / 20);\n\n            this.setState({\n                books: books,\n                isSearching: false,\n                msg: msg,\n                totalRecords: totalRecords,\n                totalPages: totalPages\n            });\n        }).catch(err => {\n            console.log(err);\n            this.setState({ isSearching: false, msg: 'Some error occured'});\n        })\n    };\n\n\n    handleSubmit = e => {\n        e.preventDefault();\n        this.searchBook();\n        this.setState({isSearching: true});\n    };\n\n    onPageChanged = currentPage => {\n        this.setState({\n            currentPage: currentPage,\n            isSearching: true\n        }, () => this.searchBook());\n    }\n\n    render() {\n        return (\n            <div className=\"container-fluid\">\n                <GoodReads\n                    queryText={this.state.queryText}\n                    books={this.state.books}\n                    handleQuery={this.handleQuery}\n                    searchBook={this.searchBook}\n                    handleSubmit={this.handleSubmit}\n                    isSearching={this.state.isSearching}\n                    msg={this.state.msg}\n                    currentPage={this.state.currentPage}\n                    totalPages={this.state.totalPages}\n                    totalRecords={this.state.totalRecords}\n                    onPageChanged={this.onPageChanged}\n                    pageNeighbours={this.state.pageNeighbours}\n                />\n            </div>\n        );\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}