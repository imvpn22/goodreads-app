{"version":3,"sources":["Pagination.js","GoodReads.js","App.js","serviceWorker.js","index.js"],"names":["Pagination","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","currentPage","totalPage","pageNeighbours","react_default","a","createElement","className","Component","GoodReads","createBookView","book","key","id","_text","src","best_book","image_url","alt","title","author","name","average_rating","ratings_count","text_reviews_count","_this2","booksView","books","length","map","onSubmit","e","handleSubmit","type","placeholder","value","queryText","onChange","handleQuery","required","autoFocus","isSearching","msg","src_Pagination","convert","require","USER_KEY","App","target","setState","searchBook","pageNo","url","concat","fetch","method","headers","X-Requested-With","then","res","text","xml","xml2json","compact","spaces","trim","nativeType","JSON","parse","console","log","GoodreadsResponse","search","results","work","totalResults","queryTime","parseInt","catch","err","preventDefault","src_GoodReads","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"+QAsBeA,cAnBX,SAAAA,EAAYC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACfE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KACDQ,MAAQ,CACTC,YAAa,EACbC,UAAW,GACXC,eAAgB,GALLV,wEAWf,OACIW,EAAAC,EAAAC,cAAA,OAAKC,UAAU,sBAbFC,aCuDVC,6MApDXC,eAAiB,SAACC,GACd,OAAOP,EAAAC,EAAAC,cAAA,OAAKC,UAAU,WAAYK,IAAKD,EAAKE,GAAGC,OAC3CV,EAAAC,EAAAC,cAAA,OAAKC,UAAU,UACXQ,IAAKJ,EAAKK,UAAUC,UAAUH,MAC9BI,IAAKP,EAAKK,UAAUG,MAAML,MAAQ,WACtCV,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aAAf,IAA6BI,EAAKK,UAAUG,MAAML,MAAlD,KACAV,EAAAC,EAAAC,cAAA,OAAKC,UAAU,cAAf,IAA8BI,EAAKK,UAAUI,OAAOC,KAAKP,MAAzD,KACAV,EAAAC,EAAAC,cAAA,OAAKC,UAAU,cACXH,EAAAC,EAAAC,cAAA,KAAGC,UAAU,eACZI,EAAKW,eAAeR,OAEzBV,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aAAf,YACcI,EAAKY,cAAcT,MADjC,gBAESH,EAAKa,mBAAmBV,MAFjC,sFAOC,IAAAW,EAAA7B,KACD8B,EAAY,WAKhB,OAJI9B,KAAKJ,MAAMmC,OAAS/B,KAAKJ,MAAMmC,MAAMC,OAAS,IAC9CF,EAAY9B,KAAKJ,MAAMmC,MAAME,IAAI,SAAAlB,GAAI,OAAIc,EAAKf,eAAeC,MAI7DP,EAAAC,EAAAC,cAAA,OAAKC,UAAU,QACXH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,UAAf,yBACAH,EAAAC,EAAAC,cAAA,QAAMC,UAAU,aAAauB,SAAU,SAAAC,GAAC,OAAIN,EAAKjC,MAAMwC,aAAaD,KAChE3B,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACXH,EAAAC,EAAAC,cAAA,SAAO2B,KAAK,OACRC,YAAY,oBACZC,MAAOvC,KAAKJ,MAAM4C,UAClBC,SAAU,SAAAN,GAAC,OAAIN,EAAKjC,MAAM8C,YAAYP,IACtCQ,UAAU,EACVC,WAAW,IACfpC,EAAAC,EAAAC,cAAA,UAAQ2B,KAAK,SAASE,MAAM,UACxB/B,EAAAC,EAAAC,cAAA,KAAGC,UAAYX,KAAKJ,MAAMiD,YAAc,8BAAgC,oBAGhFrC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,eACVX,KAAKJ,MAAMkD,MAGpBtC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,YACVmB,GAELtB,EAAAC,EAAAC,cAACqC,EAAD,cAhDQnC,aCAlBoC,EAAUC,EAAQ,IAElBC,EAAQ,uBAyFCC,cAtFX,SAAAA,EAAYvD,GAAM,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAmD,IACdtD,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAqD,GAAAhD,KAAAH,KAAMJ,KAeV8C,YAAc,SAAAP,GACV,IAAIK,EAAYL,EAAEiB,OAAOb,MACzB1C,EAAKwD,SAAS,CAACb,eAlBD3C,EAsBlByD,WAAa,WAET,IAAId,EAAY3C,EAAKO,MAAMoC,UACvBe,EAAS1D,EAAKO,MAAMmD,OAEpBC,EAAG,GAAAC,OADK,uCACL,6CAAAA,OAA0DP,EAA1D,OAAAO,OAAwEjB,EAAxE,UAAAiB,OAA0FF,GAEjGG,MAAMF,EAAK,CACHG,OAAQ,MACRC,QAAS,CACLC,mBAAqB,oBAE9BC,KAAK,SAAAC,GAAG,OAAIA,EAAIC,SAClBF,KAAK,SAAAG,GACF,IAAIF,EAAMf,EAAQkB,SAASD,EAAK,CAC1BE,SAAS,EACTC,OAAQ,EACRC,MAAM,EACNC,YAAY,IAGlBP,EAAMQ,KAAKC,MAAMT,GACjBU,QAAQC,IAAIX,GAEZ,IAAIhC,EAAQgC,EAAIY,kBAAkBC,OAAOC,QAAQC,KAC7CC,EAAehB,EAAIY,kBAAkBC,OAAO,iBAAiB1D,MAC7D8D,EAAYjB,EAAIY,kBAAkBC,OAAO,sBAAsB1D,MAC/D4B,EAAG,WAAAW,OAAcsB,EAAd,gBAAAtB,OAAyCuB,EAAzC,SAEH1E,EAAY2E,SAASF,EAAc,IAAM,GAE7ClF,EAAKwD,SAAS,CAACtB,MAAOA,EAAOc,aAAa,EAAOC,IAAKA,EAAKxC,UAAWA,MACvE4E,MAAM,SAAAC,GACLV,QAAQC,IAAIS,GACZtF,EAAKwD,SAAS,CAAER,aAAa,EAAOC,IAAK,0BAxD/BjD,EA6DlBuC,aAAe,SAAAD,GACXA,EAAEiD,iBACFvF,EAAKyD,aACLzD,EAAKwD,SAAS,CAACR,aAAa,KA9D5BhD,EAAKO,MAAQ,CACT2B,MAAO,GACPS,UAAW,GACXK,aAAa,EACbU,OAAQ,EACRjD,UAAW,EACXwC,IAAK,IARKjD,qHAoEd,OACIW,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACXH,EAAAC,EAAAC,cAAC2E,EAAD,CACI7C,UAAWxC,KAAKI,MAAMoC,UACtBT,MAAO/B,KAAKI,MAAM2B,MAClBW,YAAa1C,KAAK0C,YAClBY,WAAYtD,KAAKsD,WACjBlB,aAAcpC,KAAKoC,aACnBS,YAAa7C,KAAKI,MAAMyC,YACxBU,OAAQvD,KAAKI,MAAMmD,OACnBjD,UAAWN,KAAKI,MAAME,UACtBwC,IAAK9C,KAAKI,MAAM0C,cAhFlBlC,aCKE0E,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOpF,EAAAC,EAAAC,cAACmF,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMpC,KAAK,SAAAqC,GACjCA,EAAaC","file":"static/js/main.dd096e1e.chunk.js","sourcesContent":["import React, { Component } from 'react';\n\nclass Pagination extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            currentPage: 3,\n            totalPage: 10,\n            pageNeighbours: 2\n\n        }\n    }\n\n    render() {\n        return (\n            <div className=\"pagination\">\n\n            </div>\n        );\n    }\n}\n\nexport default Pagination;\n","import React, { Component } from 'react';\nimport Pagination from './Pagination';\n\nclass GoodReads extends Component {\n\n    createBookView = (book) => {\n        return <div className=\"bookCard\"  key={book.id._text}>\n            <img className=\"bookImg\"\n                src={book.best_book.image_url._text}\n                alt={book.best_book.title._text + \" image\"}/>\n            <div className=\"bookTitle\"> {book.best_book.title._text} </div>\n            <div className=\"bookAuthor\"> {book.best_book.author.name._text} </div>\n            <div className=\"bookRating\">\n                <i className=\"fa fa-star\"></i>\n                {book.average_rating._text}\n            </div>\n            <div className=\"bookOther\">\n                Based on {book.ratings_count._text} Ratings\n                and {book.text_reviews_count._text} Reviews\n            </div>\n         </div>;\n    };\n\n    render() {\n        let booksView = 'No Books';\n        if (this.props.books && this.props.books.length > 0) {\n            booksView = this.props.books.map(book => this.createBookView(book));\n        }\n\n        return (\n            <div className=\"main\">\n                <div className=\"header\">Goodreads Book Search</div>\n                <form className=\"searchForm\" onSubmit={e => this.props.handleSubmit(e)}>\n                    <div className=\"searchBox\">\n                        <input type=\"text\"\n                            placeholder=\"Book name, author\"\n                            value={this.props.queryText}\n                            onChange={e => this.props.handleQuery(e)}\n                            required={true}\n                            autoFocus={true}/>\n                        <button type=\"submit\" value=\"Search\">\n                            <i className={(this.props.isSearching ? \"fas fa-circle-notch fa-spin\" : \"fas fa-search\")}></i>\n                        </button>\n                    </div>\n                    <div className=\"responseBox\">\n                        {this.props.msg}\n                    </div>\n                </form>\n                <div className=\"bookList\">\n                    {booksView}\n                </div>\n                <Pagination/>\n            </div>\n        );\n    }\n}\n\nexport default GoodReads;\n","import React, { Component } from 'react';\nimport GoodReads from './GoodReads';\n\nconst convert = require('xml-js');\n\nconst USER_KEY = `tmNs0wHYZNwx5cr20pTg`;\n\nclass App extends Component {\n    constructor(props){\n        super(props);\n        this.state = {\n            books: [],\n            queryText: '',\n            isSearching: false,\n            pageNo: 1,\n            totalPage: 1,\n            msg: ''\n        }\n    }\n\n    componentDidMount() {\n\n    }\n\n    handleQuery = e => {\n        let queryText = e.target.value;\n        this.setState({queryText});\n        // this.searchBook(queryText);\n    };\n\n    searchBook = () => {\n\n        let queryText = this.state.queryText;\n        let pageNo = this.state.pageNo;\n        let APIProxy = `https://cors-anywhere.herokuapp.com/`;\n        let url = `${APIProxy}https://www.goodreads.com/search.xml?key=${USER_KEY}&q=${queryText}&page=${pageNo}`;\n\n        fetch(url, {\n                method: 'GET',\n                headers: {\n                    \"X-Requested-With\" : \"XMLHttpRequest\"\n                }\n        }).then(res => res.text())\n        .then(xml => {\n            let res = convert.xml2json(xml, {\n                  compact: true,\n                  spaces: 0,\n                  trim: true,\n                  nativeType: true\n                });\n\n            res = JSON.parse(res);\n            console.log(res);\n\n            let books = res.GoodreadsResponse.search.results.work;\n            let totalResults = res.GoodreadsResponse.search['total-results']._text;\n            let queryTime = res.GoodreadsResponse.search['query-time-seconds']._text;\n            let msg = `Fetched ${totalResults} results in ${queryTime} sec.`;\n\n            let totalPage = parseInt(totalResults, 10) / 20;\n\n            this.setState({books: books, isSearching: false, msg: msg, totalPage: totalPage});\n        }).catch(err => {\n            console.log(err);\n            this.setState({ isSearching: false, msg: 'Some error occured'});\n        })\n    };\n\n\n    handleSubmit = e => {\n        e.preventDefault();\n        this.searchBook();\n        this.setState({isSearching: true});\n    };\n\n    render() {\n        return (\n            <div className=\"container\">\n                <GoodReads\n                    queryText={this.state.queryText}\n                    books={this.state.books}\n                    handleQuery={this.handleQuery}\n                    searchBook={this.searchBook}\n                    handleSubmit={this.handleSubmit}\n                    isSearching={this.state.isSearching}\n                    pageNo={this.state.pageNo}\n                    totalPage={this.state.totalPage}\n                    msg={this.state.msg}\n                />\n            </div>\n        );\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}